// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire_excel

import (
	"github.com/google/wire"
	"github.com/ryvasa/go-super-farmer/cmd/report/app"
	"github.com/ryvasa/go-super-farmer/pkg/database"
	"github.com/ryvasa/go-super-farmer/pkg/env"
	"github.com/ryvasa/go-super-farmer/pkg/messages"
	"github.com/ryvasa/go-super-farmer/service_report/dilevery/http/handler"
	"github.com/ryvasa/go-super-farmer/service_report/dilevery/http/routes"
	"github.com/ryvasa/go-super-farmer/service_report/repository"
	"github.com/ryvasa/go-super-farmer/service_report/usecase"
	"github.com/ryvasa/go-super-farmer/utils"
)

// Injectors from wire.go:

func InitializeReportApp() (*app.ReportApp, error) {
	envEnv, err := env.LoadEnv()
	if err != nil {
		return nil, err
	}
	db, err := database.NewPostgres(envEnv)
	if err != nil {
		return nil, err
	}
	reportRepository := repository.NewReportRepositoryImpl(db)
	globFunc := utils.NewGlobFunc()
	excelInterface := usecase.NewExcelImpl(globFunc)
	reportUsecase := usecase.NewReportUsecase(reportRepository, excelInterface)
	rabbitMQ, err := messages.NewRabbitMQ(envEnv)
	if err != nil {
		return nil, err
	}
	reportHandler := report_handler.NewReportHandler(reportUsecase, excelInterface, rabbitMQ)
	handlers := report_handler.NewHandlers(reportHandler)
	engine := report_route.NewRoutes(handlers)
	reportApp := app.NewApp(engine, envEnv, db, rabbitMQ, handlers)
	return reportApp, nil
}

// wire.go:

var allSet = wire.NewSet(env.LoadEnv, database.NewPostgres, messages.NewRabbitMQ, repository.NewReportRepositoryImpl, usecase.NewExcelImpl, usecase.NewReportUsecase, report_handler.NewReportHandler, app.NewApp, report_route.NewRoutes, report_handler.NewHandlers, utils.NewGlobFunc)
