// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire_excel

import (
	"github.com/google/wire"
	"github.com/ryvasa/go-super-farmer-report-service/cmd/app"
	"github.com/ryvasa/go-super-farmer-report-service/internal/dilevery/handler"
	"github.com/ryvasa/go-super-farmer-report-service/internal/repository"
	"github.com/ryvasa/go-super-farmer-report-service/internal/usecase"
	"github.com/ryvasa/go-super-farmer-report-service/pkg/database"
	"github.com/ryvasa/go-super-farmer-report-service/pkg/env"
	"github.com/ryvasa/go-super-farmer-report-service/pkg/minio"
	"github.com/ryvasa/go-super-farmer-report-service/utils"
)

// Injectors from wire.go:

func InitializeReportApp() (*app.ReportApp, error) {
	envEnv, err := env.LoadEnv()
	if err != nil {
		return nil, err
	}
	db, err := database.NewPostgres(envEnv)
	if err != nil {
		return nil, err
	}
	client := minio.NewMinioClient(envEnv)
	reportRepository := repository.NewReportRepositoryImpl(db)
	globFunc := utils.NewGlobFunc()
	excelInterface := usecase.NewExcelImpl(globFunc, client)
	reportUsecase := usecase.NewReportUsecase(reportRepository, excelInterface)
	reportApp := app.NewApp(envEnv, db, client, reportUsecase)
	return reportApp, nil
}

// wire.go:

var allSet = wire.NewSet(env.LoadEnv, database.NewPostgres, minio.NewMinioClient, repository.NewReportRepositoryImpl, usecase.NewExcelImpl, usecase.NewReportUsecase, handler.NewReportHandler, app.NewApp, utils.NewGlobFunc)
